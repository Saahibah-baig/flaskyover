import React, { useState } from 'react';
import { FaUser } from 'react-icons/fa';
import './Userlimit.css';

const Userlimit = () => {
  const [users, setUsers] = useState([
    { id: 1, username: 'a1', email: 'a1@example.com', appLimit: 1 },
    { id: 2, username: 'a2', email: 'a2@example.com', appLimit: 1 },
    { id: 3, username: 'a3', email: 'a3@example.com', appLimit: 1 },
    { id: 4, username: 'a4', email: 'a4@example.com', appLimit: 1 },
    { id: 5, username: 'a5', email: 'a5@example.com', appLimit: 1 },
  ]);

  const [popup, setPopup] = useState({ visible: false, userId: null, inputValue: 1 });

  const handleUpdateLimit = (userId, newLimit) => {
    setUsers(users.map(user => {
      if (user.id === userId) {
        return { ...user, appLimit: newLimit };
      }
      return user;
    }));
    closePopup();
  };

  const showPopup = (userId) => {
    setPopup({ visible: true, userId, inputValue: users.find(user => user.id === userId)?.appLimit || 1 });
  };

  const closePopup = () => {
    setPopup({ visible: false, userId: null, inputValue: 1 });
  };

  return (
    <div className="update-user-limit">
      <h2>Update User Limits</h2>
      <div className="user-list">
        {users.map(user => (
          <div className="user-row" key={user.id}>
            <div className="user-info">
              <div className="user-icon">
                <FaUser size={34} color="red" /> 
              </div>
              <div className="user-details">
                <h3>{user.username}</h3>
                <p>{user.email}</p>
              </div>
            </div>
            <div className="app-limit">
              <span>App Limit:</span>
              <input
                type="number"
                value={user.appLimit}
                onChange={(e) => handleUpdateLimit(user.id, parseInt(e.target.value))}
                min="1"
                max="100"
              />
              <button className="btn-primary" onClick={() => showPopup(user.id)}>
                Update Limit
              </button>
            </div>
          </div>
        ))}
      </div>

      {popup.visible && (
        <div className="popup">
          <div className="popup-content">
            <p>Are you sure you want to assign {popup.inputValue} app for {users.find(user => user.id === popup.userId)?.username}?</p>
            <button className="button confirm-button" onClick={() => handleUpdateLimit(popup.userId, popup.inputValue)}>Confirm</button>
            <button className="button cancel-button" onClick={closePopup}>Cancel</button>
          </div>
        </div>
      )}
    </div>
  );
};

export default Userlimit;
.update-user-limit {
  max-width: 800px;
  margin: 0 auto;
  padding: 20px;
  background-color: #fff;
  border: 1px solid #ccc;
  border-radius: 8px;
  box-shadow: 0 0 20px rgba(0, 0, 0, 0.1);
}

.update-user-limit h2 {
  font-size: 2rem;
  margin-bottom: 20px;
  text-align: center;
  color: #d71e28; 
}

.user-list {
  display: grid;
  grid-gap: 20px;
}

.user-row {
  display: flex;
  align-items: center;
  justify-content: space-between;
  background-color: #f0f0f0;
  padding: 20px;
  border-radius: 8px;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
}

.user-row:hover {
  transform: translateY(-5px);
  transition: transform 0.3s ease-in-out;
}

.user-info {
  display: flex;
  align-items: center;
}

.user-icon {
  width: 50px;
  height: 50px;
  border-radius: 50%;
  overflow: hidden;
  margin-right: 20px;
}

.user-icon img {
  width: 100%;
  height: 100%;
  object-fit: cover;
}

.user-details {
  flex: 1;
}

.user-details h3 {
  font-size: 1.5rem;
  margin-bottom: 5px;
  color: #333;
}

.user-details p {
  color: #666;
}

.app-limit {
  display: flex;
  align-items: center;
}

.app-limit span {
  margin-right: 10px;
  color: #888;
}

.app-limit input {
  width: 60px;
  padding: 8px;
  font-size: 1rem;
  border: 1px solid #ccc;
  border-radius: 4px;
  margin-right: 10px;
}

.btn-primary {
  padding: 8px 16px;
  background-color: #d71e28; 
  color: white;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  transition: background-color 0.3s ease;
}

.btn-primary:hover {
  background-color: #b11116; 
}

.popup {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.5); 
  display: flex;
  justify-content: center;
  align-items: center;
}

.popup-content {
  background-color: white;
  padding: 20px;
  border-radius: 8px;
  box-shadow: 0 0 20px rgba(0, 0, 0, 0.2);
  text-align: center;
  max-width: 400px;
}

.popup-content p {
  font-size: 1.2rem;
  margin-bottom: 20px;
}

.popup-note {
  font-size: 0.9rem;
  color: #888;
  margin-bottom: 10px;
}

.button {
  padding: 8px 16px;
  margin-right: 10px;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  transition: background-color 0.3s ease;
}

.confirm-button {
  background-color: #007bff; 
  color: white;
}

.confirm-button:hover {
  background-color: #0056b3; 
}

.cancel-button {
  background-color: #ccc;
  color: #333;
}

.cancel-button:hover {
  background-color: #bbb;
}
